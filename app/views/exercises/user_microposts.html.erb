<div class="head">
  <h2>13.1: Using Micropost.new in the console, instantiate a new Micropost object called micropost with content “Lorem ipsum” and user id equal to the id of the first user in the database. What are the values of the magic columns created_at and updated_at?</h2>
</div>

<div class="response">
  <p>The values of the magic columns is nil because it was not saved</p>
</div>

<div class="head">
  <h2>13.2: What is micropost.user for the micropost in the previous exercise? What about micropost.user.name?</h2>
</div>

<div class="response">
  <p>micropost.user returns the first User (user instantiated in micropost) and micropost.user.name returns the name user, "Example User"</p>
</div>

<div class="head">
  <h2>13.3: Save the micropost to the database. What are the values of the magic columns now?</h2>
</div>

<div class="response">
  <p>Now the values of the magic columns is current timestamp</p>
</div>

<div class="head">
  <h2>13.4: At the console, instantiate a micropost with no user id and blank content. Is it valid? What are the full error messages?</h2>
</div>

<div class="response">
  <p>Is invalid, the message erros is "User must exist" and "User can't be blank"</p>
</div>

<div class="head">
  <h2>13.5: At the console, instantiate a second micropost with no user id and content that’s too long. Is it valid? What are the full error messages?</h2>
</div>

<div class="response">
  <p>Is invalid, the message erros is "User must exist", "User can't be blank" and "Content is too long (maximum is 140 characters)"</p>
</div>

<div class="head">
  <h2>13.6: Set user to the first user in the database. What happens when you execute the command micropost = user.microposts.create(content: "Lorem ipsum")?</h2>
</div>

<div class="response">
  <p>Creates a new micropost</p>
</div>

<div class="head">
  <h2>13.7: The previous exercise should have created a micropost in the database. Confirm this by running user.microposts.find(micropost.id). What if you write micropost instead of micropost.id?</h2>
</div>

<div class="response">
  <p>Returns the micropost but also returns DEPRECATION WARNING</p>
</div>

<div class="head">
  <h2>13.8: What is the value of user == micropost.user? How about user.microposts.first == micropost?</h2>
</div>

<div class="response">
  <p>the value of user == micropost.user is true and value of user.microposts.first == micropost is false</p>
</div>

<div class="head">
  <h2>13.9: How does the value of Micropost.first.created_at compare to Micropost.last.created_at?</h2>
</div>

<div class="coding">
  <pre>
    2.4.0 :025 > Micropost.first.created_at
      Micropost Load (27.2ms)  SELECT  "microposts".* FROM "microposts" ORDER BY "microposts"."created_at" DESC LIMIT ?  [["LIMIT", 1]]
     => Tue, 06 Jun 2017 19:11:06 UTC +00:00
    2.4.0 :026 > Micropost.last.created_at
      Micropost Load (2.1ms)  SELECT  "microposts".* FROM "microposts" ORDER BY "microposts"."created_at" ASC LIMIT ?  [["LIMIT", 1]]
     => Mon, 05 Jun 2017 19:32:59 UTC +00:00
    2.4.0 :027 >
  </pre>
</div>

<div class="head">
  <h2>13.10: How does the value of Micropost.first.created_at compare to Micropost.last.created_at?</h2>
</div>

<div class="coding">
  <pre>
      SELECT  "microposts".* FROM "microposts" ORDER BY "microposts"."created_at" DESC LIMIT ?  [["LIMIT", 1]]

      SELECT  "microposts".* FROM "microposts" ORDER BY "microposts"."created_at" ASC LIMIT ?  [["LIMIT", 1]]
  </pre>
</div>

<div class="head">
  <h2>13.11: Let user be the first user in the database. What is the id of its first micropost? Destroy the first user in the database using the destroy method, then confirm using Micropost.find that the user’s first micropost was also destroyed.</h2>
</div>

<div class="coding">
  <pre>
    Micropost.find id
      Micropost Load (1.9ms)  SELECT  "microposts".* FROM "microposts" WHERE "microposts"."id" = ? ORDER BY "microposts"."created_at" DESC LIMIT ?  [["id", 303], ["LIMIT", 1]]
    ActiveRecord::RecordNotFound: Couldn't find Micropost with 'id'=303
  </pre>
</div>

<div class="head">
  <h2>13.12: As mentioned briefly in Section 7.3.3, helper methods like time_ago_in_words are available in the Rails console via the helper object. Using helper, apply time_ago_in_words to 3.weeks.ago and 6.months.ago.</h2>
</div>

<div class="coding">
  <pre>
    2.4.0 :035 > helper.time_ago_in_words(3.weeks.ago)
     => "21 days"
    2.4.0 :036 > helper.time_ago_in_words(6.months.ago)
     => "6 months"
  </pre>
</div>

<div class="head">
  <h2>13.13: What is the result of helper.time_ago_in_words(1.year.ago)?</h2>
</div>

<div class="coding">
  <pre>
    2.4.0 :037 > helper.time_ago_in_words(1.year.ago)
     => "about 1 year"
  </pre>
</div>

<div class="head">
  <h2>13.14: What is the Ruby class for a page of microposts? Hint: Use the code in Listing 13.23 as your model, and call the class method on paginate with the argument page: nil.</h2>
</div>

<div class="response">
  <p>Returns de first page</p>
</div>

<div class="head">
  <h2>13.15: See if you can guess the result of running (1..10).to_a.take(6). Check at the console to see if your guess is right.</h2>
</div>

<div class="coding">
  <pre>
    2.4.0 :049 > (1..10).to_a.take(6)
     => [1, 2, 3, 4, 5, 6]
  </pre>
</div>

<div class="head">
  <h2>13.16: Is the to_a method in the previous exercise necessary?</h2>
</div>

<div class="coding">
  <pre>
    2.4.0 :051 > (1..10).take(6)
     => [1, 2, 3, 4, 5, 6]
  </pre>
</div>

<div class="head">
  <h2>13.17: Faker has a huge number of occasionally amusing applications. By consulting the Faker documentation, learn how to print out a fake university name, a fake phone number, a fake Hipster Ipsum sentence, and a fake Chuck Norris fact.</h2>
</div>

<div class="response">
  <p>OK</p>
</div>

<div class="head">
  <h2>13.18: Comment out the application code needed to change the two ’h1’ lines in Listing 13.28 from green to red.</h2>
</div>

<div class="response">
  <p>OK</p>
</div>

<div class="head">
  <h2>13.19: Update Listing 13.28 to test that will_paginate appears only once. Hint: Refer to Table 5.2.</h2>
</div>

<div class="response">
  <p>OK</p>
</div>

<div class="head">
  <h2>13.20: Why is it a bad idea to leave a copy of logged_in_user in the Users controller?</h2>
</div>

<div class="response">
  <p>Is a bad idea because we will be duplicating the method</p>
</div>

<div class="head">
  <h2>13.21: Refactor the Home page to use separate partials for the two branches of the if-else statement.</h2>
</div>

<div class="response">
  <p>OK</p>
</div>

<div class="head">
  <h2>13.22: Use the newly created micropost UI to create the first real micropost. What are the contents of the INSERT command in the server log?</h2>
</div>

<div class="coding">
  <pre>
    Started POST "/microposts" for 127.0.0.1 at 2017-06-06 17:24:14 -0300
    Processing by MicropostsController#create as HTML
      Parameters: {"utf8"=>"✓", "authenticity_token"=>"gW4xGmInxiHno7xWxTjddOlk6ncuJtvO5u6ofsBGkeH/p2bHTYxE8S9PohQ1SBa7dZs2N7/eji6q3c+kGDyRrw==", "micropost"=>{"content"=>"shasuhasusahsausahaus"}, "commit"=>"Post"}
      User Load (0.5ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
       (0.1ms)  begin transaction
      SQL (95.5ms)  INSERT INTO "microposts" ("content", "user_id", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["content", "shasuhasusahsausahaus"], ["user_id", 1], ["created_at", 2017-06-06 20:24:14 UTC], ["updated_at", 2017-06-06 20:24:14 UTC]]
       (817.0ms)  commit transaction
    Redirected to http://localhost:3000/
    Completed 302 Found in 932ms (ActiveRecord: 913.2ms)
  </pre>
</div>

<div class="head">
  <h2>13.23: In the console, set user to the first user in the database. Confirm that the values of by Micropost.where("user_id = ?", user.id), user.microposts, and user.feed are all the same. Hint: It’s probably easiest to compare directly using ==.</h2>
</div>

<div class="coding">
  <pre>
    2.4.0 :059 > m1 == m2 and m1 == m3
      => true
  </pre>
</div>

<div class="head">
  <h2>13.24: Create a new micropost and then delete it. What are the contents of the DELETE command in the server log?</h2>
</div>

<div class="coding">
  <pre>
    Started DELETE "/microposts/301" for 127.0.0.1 at 2017-06-06 17:35:39 -0300
    Processing by MicropostsController#destroy as HTML
      Parameters: {"authenticity_token"=>"YKHMJPWV5veh24qJ+N9Olky6DNAeTGO47RH2jSdczC7Zil1mEx04RrHp+LNOC4fIW4dqVU04+Aj+prmKAXtGKQ==", "id"=>"301"}
      User Load (1.0ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
      Micropost Load (0.6ms)  SELECT  "microposts".* FROM "microposts" WHERE "microposts"."user_id" = ? AND "microposts"."id" = ? ORDER BY "microposts"."created_at" DESC LIMIT ?  [["user_id", 1], ["id", 301], ["LIMIT", 1]]
       (0.1ms)  begin transaction
      SQL (22.2ms)  DELETE FROM "microposts" WHERE "microposts"."id" = ?  [["id", 301]]
       (213.6ms)  commit transaction
    Redirected to http://localhost:3000/
    Completed 302 Found in 439ms (ActiveRecord: 244.9ms)
  </pre>
</div>

<div class="head">
  <h2>13.25: Confirm directly in the browser that the line redirect_to request.referrer || root_url can be replaced with the line redirect_back(fallback_location: root_url)</h2>
</div>

<div class="response">
  <p>OK</p>
</div>

<div class="head">
  <h2>13.26: For each of the four scenarios indicated by comments in Listing 13.55 (starting with “Invalid submission”), comment out application code to get the corresponding test to red, then uncomment to get back to green.</h2>
</div>

<div class="response">
  <p>OK</p>
</div>

<div class="head">
  <h2>13.27: Add tests for the sidebar micropost count (including proper pluralization). Listing 13.57 will help get you started.</h2>
</div>

<div class="response">
  <p>OK</p>
</div>

<div class="head">
  <h2>13.28: Upload a micropost with attached image. Does the result look too big? (If so, don’t worry; we’ll fix it in Section 13.4.3).</h2>
</div>

<div class="response">
  <p>OK</p>
</div>

<div class="head">
  <h2>13.29: Following the template in Listing 13.63, write a test of the image uploader in Section 13.4. As preparation, you should add an image to the fixtures directory (using, e.g, cp app/assets/images/rails.png test/fixtures/). The additional assertions in Listing 13.63 check both for a file upload field on the Home page and for a valid image attribute on the micropost resulting from valid submission. Note the use of the special fixture_file_upload method for uploading files as fixtures inside tests.18 Hint: To check for a valid picture attribute, use the assigns method mentioned in Section 11.3.3 to access the micropost in the create action after valid submission..</h2>
</div>

<div class="response">
  <p>OK</p>
</div>

<div class="head">
  <h2>13.30: What happens if you try uploading an image bigger than 5 megabytes?</h2>
</div>

<div class="response">
  <p>show the messange "Maximum file size is 5MB. Please choose a smaller file."</p>
</div>

<div class="head">
  <h2>13.31: What happens if you try uploading a file with an invalid extension?</h2>
</div>

<div class="head">
  <h2>13.32: Upload a large image and confirm directly that the resizing is working. Does the resizing work even if the image isn’t square?</h2>
</div>

<div class="response">
  <p>Is working</p>
</div>

<div class="head">
  <h2>13.33: If you completed the image upload test in Listing 13.63, at this point your test suite may be giving you a confusing error message. Fix this issue by configuring CarrierWave to skip image resizing in tests using the initializer file shown in Listing 13.68.</h2>
</div>

<div class="response">
  <p>ok</p>
</div>

<div class="head">
  <h2>13.34: Upload a large image and confirm directly that the resizing is working in production. Does the resizing work even if the image isn’t square?</h2>
</div>

<div class="response">
  <p>ok</p>
</div>
